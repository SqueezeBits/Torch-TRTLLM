diff --git a/cpp/include/tensorrt_llm/common/mpiUtils.h b/cpp/include/tensorrt_llm/common/mpiUtils.h
index edf3da00..6c914151 100644
--- a/cpp/include/tensorrt_llm/common/mpiUtils.h
+++ b/cpp/include/tensorrt_llm/common/mpiUtils.h
@@ -18,6 +18,7 @@
 
 #include "tensorrt_llm/common/assert.h"
 #include "tensorrt_llm/runtime/utils/multiDeviceUtils.h"
+#include <cstdint>
 #include <limits>
 
 #ifdef ENABLE_FP8
diff --git a/scripts/build_wheel.py b/scripts/build_wheel.py
index 0f7e4c75..f6b4af40 100755
--- a/scripts/build_wheel.py
+++ b/scripts/build_wheel.py
@@ -82,6 +82,7 @@ def main(*,
          cpp_only: bool = False,
          install: bool = False,
          skip_building_wheel: bool = False,
+         skip_install_requirements: bool = False,
          python_bindings: bool = True,
          benchmarks: bool = False,
          micro_benchmarks: bool = False,
@@ -94,7 +95,8 @@ def main(*,
         build_run('git submodule update --init --recursive')
     on_windows = platform.system() == "Windows"
     requirements_filename = "requirements-dev-windows.txt" if on_windows else "requirements-dev.txt"
-    build_run(f"\"{sys.executable}\" -m pip install -r {requirements_filename}")
+    if not skip_install_requirements:
+        build_run(f"\"{sys.executable}\" -m pip install -r {requirements_filename}")
     # Ensure TRT is installed on windows to prevent surprises.
     reqs = check_output([sys.executable, "-m", "pip", "freeze"])
     installed_packages = [r.decode().split("==")[0] for r in reqs.split()]
@@ -291,7 +293,7 @@ def main(*,
             else:
                 env_ld = os.environ.copy()
 
-                new_library_path = "/usr/local/cuda/compat/lib.real"
+                new_library_path = "/usr/local/cuda/compat"
                 if 'LD_LIBRARY_PATH' in env_ld:
                     new_library_path += f":{env_ld['LD_LIBRARY_PATH']}"
                 env_ld["LD_LIBRARY_PATH"] = new_library_path
@@ -316,7 +318,7 @@ def main(*,
         )
 
     if install:
-        build_run(f"\"{sys.executable}\" -m pip install -e .[devel]")
+        build_run(f"\"{sys.executable}\" -m pip install --no-deps -e .[devel]")
 
 
 def add_arguments(parser: ArgumentParser):
@@ -326,6 +328,7 @@ def add_arguments(parser: ArgumentParser):
                         choices=["Release", "RelWithDebInfo", "Debug"])
     parser.add_argument("--cuda_architectures", "-a")
     parser.add_argument("--install", "-i", action="store_true")
+    parser.add_argument("--skip_install_requirements", action="store_true")
     parser.add_argument("--clean", "-c", action="store_true")
     parser.add_argument("--configure_cmake",
                         action="store_true",
